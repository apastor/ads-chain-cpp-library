#include <catch2/catch.hpp>

#include <regex>

#include "adschain/crypto/Signer.h"
#include "adschain/crypto/PrivateKey.h"
#include "TempPrivKeyFile.h"

using namespace adschain;

TEST_CASE("Signer class signs strings with autogenerated keys", "[unit]") {
  fruit::Injector<PrivateKey, Signer> injector(getSignerComponent);
  Signer *signer(injector);
  std::string signatureB64 = signer->signB64(
      "This is;a; string toadsffffffffffffffffffffffffffffffffffffffffssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss sign;");
//  std::cout << signatureB64 << std::endl;
  REQUIRE(signatureB64.length() % 4 == 0);
  REQUIRE(std::regex_match(signatureB64, std::regex("[a-zA-Z0-9+/]*={0,2}")));
}

TEST_CASE_METHOD(TempPrivKeyFile, "Signer class can sign strings with keys from files", "[integration]") {
  fruit::Injector<PrivateKey, Signer> injector(getSignerComponentFromFile, fileName.c_str());
  Signer *signer(injector);
  std::string signatureB64 = signer->signB64(
      "This is;a; string to sign; toadsffffffffffffffffffffffffffffffffffffffffssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss ");
  REQUIRE(signatureB64.length() % 4 == 0);
  REQUIRE(std::regex_match(signatureB64, std::regex("[a-zA-Z0-9+/]*={0,2}")));
}

